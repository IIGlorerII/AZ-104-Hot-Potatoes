<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Ariel."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="Ariel" />
<meta name="dc:title" content="AZ-104" />



<title>
AZ-104
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */



/* CSS variables for colours. */
:root{
	--strFontFace:       Geneva,Arial,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000FF;
	--strVLinkColor:     #0000CC;
	
	--strNavBarColor:    #000000;
	--strNavLightColor:  #7f7f7f;
	--strNavShadeColor:  #000000;
	--strNavTextColor:   #ffffff;
	
	--strPageBGColor:    #C0C0C0;
	--strExBGColor:      #FFFFFF;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--strFontSize);
	padding-bottom: 0.5em;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

table,div,span,td{
	font-size: 1em;
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	font-family: var(--strFontFace);
	font-size: 1em;
	display: inline;
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

.ExerciseSubtitle{
	font-size: 120%;
	color: var(--strTitleColor);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
	background-color: var(--strExBGColor);
	text-align: center;
	font-size: 1em;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin-bottom: 1px;
}

div.ReadingContainer, div.ExerciseContainer{
	min-width: 15em;
	flex-grow: 1;
	flex-basis: 0;
	margin: 1px;
}

div#ContainerDiv{
	margin: -1px;
	padding: 0;
	border: none;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", var(--strFontFace);
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: var(--strTitleColor);
}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: var(--strTitleColor);
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: var(--strTitleColor);
}

.LeftItem{
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

span.CorrectMark{

}

input, textarea{
	font-family: var(--strFontFace);
	font-size: 120%;
}

select{
	font-size: 1em;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
	font-size: 1em;
}




div.ExerciseDiv{
	color: var(--strTextColor);
}

/* JMatch standard output table. */
table.MatchTable{
	margin: 2em auto; 
	border-width: 0;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: var(--strTextColor);
	border-color: var(--strTextColor);
	margin-left: auto;
	margin-right: auto;
	margin-top: 2em;
	margin-bottom: 2em;
	/*width: 90%;*/
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: var(--strExBGColor);
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
	background-color: var(--strPageBGColor);
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div.JMixDrag, div.JMatchDrag{
	padding: 0;
	background-color: var(--strPageBGColor);
	border-style: none;
}

div#GuessDiv{
	padding: 0.5em;
	margin-bottom: 2em;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: var(--strTextColor);
	display: inline-block;
	padding: 0.5em;
	border: solid 1pt gray;
	margin-bottom: 0.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: left;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: var(--strTitleColor);
	width: 80%;
	left: 10%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: var(--strFontFace);
	font-size: 120%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: var(--strFontFace);
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

.Answer{
	font-size: 120%;
}

.PartialAnswer{
	font-size: 120%;
	letter-spacing: 0.1em;
	color: var(--strTitleColor);
}

.Highlight{
	color: #000000;
	background-color: #ffff00;
	font-weight: bold;
	font-size: 120%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-style: solid;
	border-width: 0px 0px 1px 0px;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1em;
	padding: 0.2em;
	box-sizing: border-box;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}

div.CardStyle {
	position: absolute;
	font-family: var(--strFontFace);
	font-size: 1em;
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 2em;
	border-width: 1pt;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
	background-color: var(--strExBGColor);
	left: -50px;
	top: -50px;
	overflow: visible;
	touch-action: none;
	user-select: none;
	box-sizing: border-box;
}

div.CardStyleCentered{
	text-align: center;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
//	RefreshImages();
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

	RefreshImages();

}



Imgs = new Array();

function PreloadImages(){
	var a = PreloadImages.arguments;
	for (var i=0; i<a.length; i++){
		Imgs[i] = new Image();
		Imgs[i].src = a[i];
	}
}

function RefreshImages(){
	for (var i=0; i<document.images.length; i++){
		if (document.images[i].name.substring(0,6) != 'NavBar'){
			document.images[i].src = document.images[i].src;
		}
	}
}


function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}







//JQUIZ CORE JAVASCRIPT CODE

var CurrQNum = 0;
var CorrectIndicator = '&#x2714;';
var IncorrectIndicator = '&#x2718;';
var YourScoreIs = 'Your score is ';

//New for 6.2.2.0
var CompletedSoFar = 'Questions completed so far: ';
var ExerciseCompleted = 'You have completed the exercise.';
var ShowCompletedSoFar = true;

var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';
var ShowCorrectFirstTime = true;
var ShuffleQs = false;
var ShuffleAs = false;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 12;
var Score = 0;
var Finished = false;
var Qs = null;
var QArray = new Array();
var ShowingAllQuestions = false;
var ShowAllQuestionsCaption = 'Show all questions';
var ShowOneByOneCaption = 'Show questions one by one';
var State = new Array();
var Feedback = '';
var TimeOver = false;
var strInstructions = '';
var Locked = false;

//The following variable can be used to add a message explaining that
//the question is finished, so no further marking will take place.
var strQuestionFinished = '';

function CompleteEmptyFeedback(){
	var QNum, ANum;
	for (QNum=0; QNum<I.length; QNum++){
//Only do this if not multi-select
		if (I[QNum][2] != '3'){
  		for (ANum = 0; ANum<I[QNum][3].length; ANum++){
  			if (I[QNum][3][ANum][1].length < 1){
  				if (I[QNum][3][ANum][2] > 0){
  					I[QNum][3][ANum][1] = DefaultRight;
  				}
  				else{
  					I[QNum][3][ANum][1] = DefaultWrong;
  				}
  			}
  		}
		}
	}
}

function SetUpQuestions(){
	var AList = new Array(); 
	var QList = new Array();
	var i, j;
	Qs = document.getElementById('Questions');
	while (Qs.getElementsByTagName('li').length > 0){
		QList.push(Qs.removeChild(Qs.getElementsByTagName('li')[0]));
	}
	var DumpItem = 0;
	if (QsToShow > QList.length){
		QsToShow = QList.length;
	}
	while (QsToShow < QList.length){
		DumpItem = Math.floor(QList.length*Math.random());
		for (j=DumpItem; j<(QList.length-1); j++){
			QList[j] = QList[j+1];
		}
		QList.length = QList.length-1;
	}
	if (ShuffleQs == true){
		QList = Shuffle(QList);
	}
	if (ShuffleAs == true){
		var As;
		for (var i=0; i<QList.length; i++){
			As = QList[i].getElementsByTagName('ol')[0];
			if (As != null){
  			AList.length = 0;
				while (As.getElementsByTagName('li').length > 0){
					AList.push(As.removeChild(As.getElementsByTagName('li')[0]));
				}
				AList = Shuffle(AList);
				for (j=0; j<AList.length; j++){
					As.appendChild(AList[j]);
				}
			}
		}
	}
	
	for (i=0; i<QList.length; i++){
		Qs.appendChild(QList[i]);
		QArray[QArray.length] = QList[i];
	}

//Show the first item
	QArray[0].style.display = '';
	
//Now hide all except the first item
	for (i=1; i<QArray.length; i++){
		QArray[i].style.display = 'none';
	}		
	SetQNumReadout();
	
	SetFocusToTextbox();
}

function SetFocusToTextbox(){
//if there's a textbox, set the focus in it
	if (QArray[CurrQNum].getElementsByTagName('input')[0] != null){
		QArray[CurrQNum].getElementsByTagName('input')[0].focus();
//and show a keypad if there is one
		if (document.getElementById('CharacterKeypad') != null){
			document.getElementById('CharacterKeypad').style.display = 'block';
		}
	}
	else{
  	if (QArray[CurrQNum].getElementsByTagName('textarea')[0] != null){
  		QArray[CurrQNum].getElementsByTagName('textarea')[0].focus();	
//and show a keypad if there is one
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'block';
			}
		}
//This added for 6.0.4.11: hide accented character buttons if no textbox
		else{
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'none';
			}
		}
	}
}

function ChangeQ(ChangeBy){
//The following line prevents moving to another question until the current
//question is answered correctly. Uncomment it to enable this behaviour. 
//	if (State[CurrQNum][0] == -1){return;}
	if (((CurrQNum + ChangeBy) < 0)||((CurrQNum + ChangeBy) >= QArray.length)){return;}
	QArray[CurrQNum].style.display = 'none';
	CurrQNum += ChangeBy;
	QArray[CurrQNum].style.display = '';
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
	SetQNumReadout();
	SetFocusToTextbox();
}

var HiddenReadingShown = false;
function ShowSpecialReadingForQuestion(){
//Undocumented function for showing specific reading text elements which change with each question
//Added on 10/12/2004
	if (document.getElementById('ReadingDiv') != null){
		if (HiddenReadingShown == true){
			document.getElementById('ReadingDiv').innerHTML = '';
		}
		if (QArray[CurrQNum] != null){
//Fix for 6.0.4.25
			var Children = QArray[CurrQNum].getElementsByTagName('div');
			for (var i=0; i<Children.length; i++){
			if (Children[i].className=="HiddenReading"){
					document.getElementById('ReadingDiv').innerHTML = Children[i].innerHTML;
					HiddenReadingShown = true;
//Hide the ShowAllQuestions button to avoid confusion
					if (document.getElementById('ShowMethodButton') != null){
						document.getElementById('ShowMethodButton').style.display = 'none';
					}
				}
			}	
		}
	}
}

function SetQNumReadout(){
	document.getElementById('QNumReadout').innerHTML = (CurrQNum+1) + ' / ' + QArray.length;
	if ((CurrQNum+1) >= QArray.length){
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'visible';
		}
	}
	if (CurrQNum <= 0){
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'visible';
		}
	}
}

var I=new Array();
I[0]=new Array();I[0][0]=100;
I[0][1]='';
I[0][2]='3';
I[0][3]=new Array();
I[0][3][0]=new Array('Box1-Enable virtual nodes','',0,0,1);
I[0][3][1]=new Array('Box1-Invrease the number of node pools','',0,0,1);
I[0][3][2]=new Array('Box1-Modify the kubernetes version setting','',0,0,1);
I[0][3][3]=new Array('Box1-modify the network configuration setting','1) Modify the Network configuration setting "To run an AKS cluster that supports  node pools for Windows Server containers, your cluster needs to use a network  policy that uses Azure CNI (advanced) network plugin." Ref:  https://learn.microsoft.com/en-us/azure/aks/learn/quick-windows-containerdeploy-cli 2) AKS-Managed Azure Active Directory Ref:  https://learn.microsoft.com/en-us/azure/aks/cluster-container-registryintegration?tabs=azure-cli',1,100,1);
I[0][3][4]=new Array('Box2-AKS-managed Azure Active Directory','1) Modify the Network configuration setting "To run an AKS cluster that supports  node pools for Windows Server containers, your cluster needs to use a network  policy that uses Azure CNI (advanced) network plugin." Ref:  https://learn.microsoft.com/en-us/azure/aks/learn/quick-windows-containerdeploy-cli 2) AKS-Managed Azure Active Directory Ref:  https://learn.microsoft.com/en-us/azure/aks/cluster-container-registryintegration?tabs=azure-cli',1,100,1);
I[0][3][5]=new Array('Box2-Authentication method','',0,0,1);
I[0][3][6]=new Array('Box2-Autorized IP ranges','',0,0,1);
I[0][3][7]=new Array('Box2-Kubernetes version','',0,0,1);
I[0][3][8]=new Array('Box2-Network configuration','',0,0,1);
I[1]=new Array();I[1][0]=100;
I[1][1]='';
I[1][2]='3';
I[1][3]=new Array();
I[1][3][0]=new Array('Box1-add','Answer is WRONG. I assume there is a typo, where it says "updates" it should be  "update". az aks nodepool **update** -n pool1 -g RG1 --cluster-name cluster1  **max-surge 2** https://learn.microsoft.com/enus/cli/azure/aks/nodepool?view=azure-cli-latest We want to edit an existing node  pool, so we cannot use "add": "Add a node pool to the managed Kubernetes  cluster." We want to update the properties of the node pool, so we need to use: az  aks nodepool update "Update a node pool properties." We want to set it up to use  more nodes during an update, so this one is right: --max-surge "Extra nodes used  to speed upgrade. When specified, it represents the number or percent used, eg.  5 or 33%."',1,100,1);
I[1][3][1]=new Array('Box1-get-updates','',0,0,1);
I[1][3][2]=new Array('Box1-scale','',0,0,1);
I[1][3][3]=new Array('Box1-updates','',0,0,1);
I[1][3][4]=new Array('Box2-max-count 2','',0,0,1);
I[1][3][5]=new Array('Box2-max-pods 2','',0,0,1);
I[1][3][6]=new Array('Box2-max-surge 2','Answer is WRONG. I assume there is a typo, where it says "updates" it should be  "update". az aks nodepool **update** -n pool1 -g RG1 --cluster-name cluster1  **max-surge 2** https://learn.microsoft.com/enus/cli/azure/aks/nodepool?view=azure-cli-latest We want to edit an existing node  pool, so we cannot use "add": "Add a node pool to the managed Kubernetes  cluster." We want to update the properties of the node pool, so we need to use: az  aks nodepool update "Update a node pool properties." We want to set it up to use  more nodes during an update, so this one is right: --max-surge "Extra nodes used  to speed upgrade. When specified, it represents the number or percent used, eg.  5 or 33%."',1,100,1);
I[1][3][7]=new Array('Box2-count 2','',0,0,1);
I[2]=new Array();I[2][0]=100;
I[2][1]='';
I[2][2]='3';
I[2][3]=new Array();
I[2][3][0]=new Array('the commands will create four new resources- YES','Answers: Yes / No / Yes Y: The 4 resources created are the RG1 resource group +  the 3 storage accounts N: the location of the storage accounts is defined by the  parameter "location" in the "resources" item that has the value of the Resource  Group (stated by the "resourceGroup().location" function that returns the  location of the resource group RG1 which is in Central US) Y: the names of the  storages account have the prefix given by the copyIndex() function in "name":  "[concat(copyIndex(),\'storage\',uniqueString(resourceGroup().id))]", which starts  at the position 0',1,100,1);
I[2][3][1]=new Array('the commands will create four new resources- NOT','',0,0,1);
I[2][3][2]=new Array('the commands will create storage accounts in the west US azure region- YES','',0,0,1);
I[2][3][3]=new Array('the commands will create storage accounts in the west US azure region- NOT','Answers: Yes / No / Yes Y: The 4 resources created are the RG1 resource group +  the 3 storage accounts N: the location of the storage accounts is defined by the  parameter "location" in the "resources" item that has the value of the Resource  Group (stated by the "resourceGroup().location" function that returns the  location of the resource group RG1 which is in Central US) Y: the names of the  storages account have the prefix given by the copyIndex() function in "name":  "[concat(copyIndex(),\'storage\',uniqueString(resourceGroup().id))]", which starts  at the position 0',1,100,1);
I[2][3][4]=new Array('The first storage account that is created will have a prefix of 0.-YES','Answers: Yes / No / Yes Y: The 4 resources created are the RG1 resource group +  the 3 storage accounts N: the location of the storage accounts is defined by the  parameter "location" in the "resources" item that has the value of the Resource  Group (stated by the "resourceGroup().location" function that returns the  location of the resource group RG1 which is in Central US) Y: the names of the  storages account have the prefix given by the copyIndex() function in "name":  "[concat(copyIndex(),\'storage\',uniqueString(resourceGroup().id))]", which starts  at the position 0',1,100,1);
I[2][3][5]=new Array('The first storage account that is created will have a prefix of 0.-NOT','',0,0,1);
I[3]=new Array();I[3][0]=100;
I[3][1]='';
I[3][2]='0';
I[3][3]=new Array();
I[3][3][0]=new Array('A','A is the answer. https://learn.microsoft.com/en-us/azure/virtualmachines/extensions/custom-script-windows The Custom Script Extension  downloads and runs scripts on Azure virtual machines (VMs). This extension is  useful for post-deployment configuration, software installation, or any other  configuration or management task. You can download scripts from Azure Storage  or GitHub, or provide them to the Azure portal at extension runtime.',1,100,1);
I[3][3][1]=new Array('B','',0,0,1);
I[3][3][2]=new Array('C','',0,0,1);
I[3][3][3]=new Array('D','',0,0,1);
I[4]=new Array();I[4][0]=100;
I[4][1]='';
I[4][2]='3';
I[4][3]=new Array();
I[4][3][0]=new Array('Box1-Name','',0,0,1);
I[4][3][1]=new Array('Box1-QueryString','',0,0,1);
I[4][3][2]=new Array('Box1-ResourceGroupName','correct answer -Mode Specifies the deployment mode. The acceptable values for  this parameter are: Complete: In complete mode, Resource Manager deletes  resources that exist in the resource group but are not specified in the template.  Incremental: In incremental mode, Resource Manager leaves unchanged  resources that exist in the resource group but are not specified in the template.  https://learn.microsoft.com/en-us/powershell/module/az.resources/newazresourcegroupdeployment?view=azps-9.2.0 There is no such mode called "All"',1,100,1);
I[4][3][3]=new Array('Box1-Tag','',0,0,1);
I[4][3][4]=new Array('Box2-All','',0,0,1);
I[4][3][5]=new Array('Box2-Complete','correct answer -Mode Specifies the deployment mode. The acceptable values for  this parameter are: Complete: In complete mode, Resource Manager deletes  resources that exist in the resource group but are not specified in the template.  Incremental: In incremental mode, Resource Manager leaves unchanged  resources that exist in the resource group but are not specified in the template.  https://learn.microsoft.com/en-us/powershell/module/az.resources/newazresourcegroupdeployment?view=azps-9.2.0 There is no such mode called "All"',1,100,1);
I[4][3][6]=new Array('Box2-Incremental','',0,0,1);
I[5]=new Array();I[5][0]=100;
I[5][1]='';
I[5][2]='3';
I[5][3]=new Array();
I[5][3][0]=new Array('Box1-1 instance','',0,0,1);
I[5][3][1]=new Array('Box1-2 instances','2, 15 Initial instance is 1 as specified in first figure. 80% for 15 minutes reaches 10  minutes duration, but haven\'t reached second turn of scale out, so only one new  instance is created. Since cool down time is 5 minutes, which means after one  scale happens, it will count 5 minutes before counting a new 10 minutes, so 15  minutes total.',1,100,1);
I[5][3][2]=new Array('Box1-3 instances','',0,0,1);
I[5][3][3]=new Array('Box1-4 instances','',0,0,1);
I[5][3][4]=new Array('Box1-5 instances','',0,0,1);
I[5][3][5]=new Array('Box2-1 minute','',0,0,1);
I[5][3][6]=new Array('Box2-5 minutes','',0,0,1);
I[5][3][7]=new Array('Box2-10 minutes','',0,0,1);
I[5][3][8]=new Array('Box2-15 minutes','2, 15 Initial instance is 1 as specified in first figure. 80% for 15 minutes reaches 10  minutes duration, but haven\'t reached second turn of scale out, so only one new  instance is created. Since cool down time is 5 minutes, which means after one  scale happens, it will count 5 minutes before counting a new 10 minutes, so 15  minutes total.',1,100,1);
I[6]=new Array();I[6][0]=100;
I[6][1]='';
I[6][2]='0';
I[6][3]=new Array();
I[6][3][0]=new Array('A','',0,0,1);
I[6][3][1]=new Array('B','',0,0,1);
I[6][3][2]=new Array('C','',0,0,1);
I[6][3][3]=new Array('D','nswer is D. https://learn.microsoft.com/en-us/azure/containerinstances/container-instances-container-groups Multi-container groups currently  support only Linux containers. For Windows containers, Azure Container  Instances only supports deployment of a single container instance. While we are  working to bring all features to Windows containers, you can find current  platform differences in the service',1,100,1);
I[7]=new Array();I[7][0]=100;
I[7][1]='';
I[7][2]='0';
I[7][3]=new Array();
I[7][3][0]=new Array('A','A is the answer. https://learn.microsoft.com/en-us/azure/virtualmachines/extensions/custom-script-windows The Custom Script Extension  downloads and runs scripts on Azure virtual machines (VMs). This extension is  useful for post-deployment configuration, software installation, or any other  configuration or management task. You can download scripts from Azure Storage  or GitHub, or provide them to the Azure portal at extension runtime.',1,100,1);
I[7][3][1]=new Array('B','',0,0,1);
I[7][3][2]=new Array('C','',0,0,1);
I[7][3][3]=new Array('D','',0,0,1);
I[8]=new Array();I[8][0]=100;
I[8][1]='';
I[8][2]='0';
I[8][3]=new Array();
I[8][3][0]=new Array('A','',0,0,1);
I[8][3][1]=new Array('B','should be the correct answer instead. https://learn.microsoft.com/enus/azure/virtual-network/ip-services/public-ip-addresses#at-a-glance Azure  Firewall - Dynamic IPv4: No - Static IPv4: Yes - Dynamic IPv6: No - Static IPv6: No  https://learn.microsoft.com/en-us/azure/virtual-network/ip-services/configurepublic-ip-firewall Azure Firewall is a cloud-based network security service that  protects your Azure Virtual Network resources. Azure Firewall requires at least  one public static IP address to be configured. This IP or set of IPs are used as the  external connection point to the firewall. Azure Firewall supports standard SKU  public IP addresses. Basic SKU public IP address and public IP prefixes aren\'t  supported.',1,100,1);
I[8][3][2]=new Array('C','',0,0,1);
I[8][3][3]=new Array('D','',0,0,1);
I[9]=new Array();I[9][0]=100;
I[9][1]='';
I[9][2]='3';
I[9][3]=new Array();
I[9][3][0]=new Array('Box1-reference','',0,0,1);
I[9][3][1]=new Array('box1-resourceld','- dependsON: resoureceID - storageProfile: ImageReference ref:  https://learn.microsoft.com/en-us/azure/virtual-machines/windows/ps-template',1,100,1);
I[9][3][2]=new Array('box1-Union','',0,0,1);
I[9][3][3]=new Array('Box2-Array','',0,0,1);
I[9][3][4]=new Array('Box2-image','',0,0,1);
I[9][3][5]=new Array('Box2-imagereference','- dependsON: resoureceID - storageProfile: ImageReference ref:  https://learn.microsoft.com/en-us/azure/virtual-machines/windows/ps-template',1,100,1);
I[9][3][6]=new Array('Box2-vhd','',0,0,1);
I[10]=new Array();I[10][0]=100;
I[10][1]='';
I[10][2]='3';
I[10][3]=new Array();
I[10][3][0]=new Array('Box1-Basic','',0,0,1);
I[10][3][1]=new Array('Box1-Free','',0,0,1);
I[10][3][2]=new Array('Box1-Shared','',0,0,1);
I[10][3][3]=new Array('Box1-Standar','WebApp1 must be able to verify a custom domain name of app.contoso.com. All  paid tiers (Basic, Standard, Premium, Isolated) allow for custom domains.  WebApp1 must be able to automatically scale up to eight instances. Auto-scaling  is a feature that is available in the Standard, Premium, and Isolated tiers. It is not  available in the Basic tier, which allows you to manually scale up to 3 instances.  Costs and administrative effort must be minimized. Pricing Plan: Given these  requirements, the best option is the "Standard" tier. It offers both auto-scaling  and custom domains, while being less expensive than the Premium or Isolated  tiers. The Basic tier does not support auto-scaling, and the Free and Shared tiers  do not support custom domains or auto-scaling. For verifying a custom domain,  Azure uses a CNAME or TXT record. The A record cannot be used for domain  verification Pricing Plan: Standard Record Type: TXT',1,100,1);
I[10][3][4]=new Array('Box2-A','',0,0,1);
I[10][3][5]=new Array('Box2-AAAA','',0,0,1);
I[10][3][6]=new Array('Box2-PTR','',0,0,1);
I[10][3][7]=new Array('Box2-TXT','WebApp1 must be able to verify a custom domain name of app.contoso.com. All  paid tiers (Basic, Standard, Premium, Isolated) allow for custom domains.  WebApp1 must be able to automatically scale up to eight instances. Auto-scaling  is a feature that is available in the Standard, Premium, and Isolated tiers. It is not  available in the Basic tier, which allows you to manually scale up to 3 instances.  Costs and administrative effort must be minimized. Pricing Plan: Given these  requirements, the best option is the "Standard" tier. It offers both auto-scaling  and custom domains, while being less expensive than the Premium or Isolated  tiers. The Basic tier does not support auto-scaling, and the Free and Shared tiers  do not support custom domains or auto-scaling. For verifying a custom domain,  Azure uses a CNAME or TXT record. The A record cannot be used for domain  verification Pricing Plan: Standard Record Type: TXT',1,100,1);
I[11]=new Array();I[11][0]=100;
I[11][1]='';
I[11][2]='3';
I[11][3]=new Array();
I[11][3][0]=new Array('Opcion1-YES','So many people here are making assumptions without actually testing or  validating them. The answer is YYY - Tested in Lab. Neither the region, vCPU  count, nor the VM generation had any impact on my ability to select a particular  VM OS disk as a source for an image version.',1,100,1);
I[11][3][1]=new Array('Opcion1-NOT','',0,0,1);
I[11][3][2]=new Array('Opcion2-YES','So many people here are making assumptions without actually testing or  validating them. The answer is YYY - Tested in Lab. Neither the region, vCPU  count, nor the VM generation had any impact on my ability to select a particular  VM OS disk as a source for an image version.',1,100,1);
I[11][3][3]=new Array('Opcion2-NOT','',0,0,1);
I[11][3][4]=new Array('Opcion3-YES','So many people here are making assumptions without actually testing or  validating them. The answer is YYY - Tested in Lab. Neither the region, vCPU  count, nor the VM generation had any impact on my ability to select a particular  VM OS disk as a source for an image version.',1,100,1);
I[11][3][5]=new Array('Opcion3-NOT','',0,0,1);


function StartUp(){

//If there's only one question, no need for question navigation controls
	if (QsToShow < 2){
		document.getElementById('QNav').style.display = 'none';
	}
	
//Stash the instructions so they can be redisplayed
	strInstructions = document.getElementById('InstructionsDiv').innerHTML;
	

	

	

	PreloadImages('imagen1.jpg','img2.jpg','img3.jpg','img4.jpg','img5.jpg','img6.jpg','img7.jpg','img8.jpg','img9.jpg','img10.jpg','img11.jpg','img12.jpg','img13.jpg','img14.jpg','img15.jpg','img16.jpg');

	
	CompleteEmptyFeedback();

	SetUpQuestions();
	ClearTextBoxes();
	CreateStatusArray();
	

	
//Check search string for q parameter
	if (document.location.search.length > 0){
		if (ShuffleQs == false){
			var JumpTo = parseInt(document.location.search.substring(1,document.location.search.length))-1;
			if (JumpTo <= QsToShow){
				ChangeQ(JumpTo);
			}
		}
	}
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
}

function ShowHideQuestions(){
	document.getElementById('ShowMethodButton').style.display = 'none';
	if (ShowingAllQuestions == false){
		for (var i=0; i<QArray.length; i++){
				QArray[i].style.display = '';
			}
		document.getElementById('Questions').style.listStyleType = 'decimal';
		document.getElementById('OneByOneReadout').style.display = 'none';
		document.getElementById('ShowMethodButton').innerHTML = ShowOneByOneCaption;
		ShowingAllQuestions = true;
	}
	else{
		for (var i=0; i<QArray.length; i++){
				if (i != CurrQNum){
					QArray[i].style.display = 'none';
				}
			}
		document.getElementById('Questions').style.listStyleType = 'none';
		document.getElementById('OneByOneReadout').style.display = '';
		document.getElementById('ShowMethodButton').innerHTML = ShowAllQuestionsCaption;
		ShowingAllQuestions = false;	
	}
	document.getElementById('ShowMethodButton').style.display = 'inline';
}

function CreateStatusArray(){
	var QNum, ANum;
//For each item in the item array
	for (QNum=0; QNum<I.length; QNum++){
//Check if the question still exists (hasn't been nuked by showing a random selection)
		if (document.getElementById('Q_' + QNum) != null){
			State[QNum] = new Array();
			State[QNum][0] = -1; //Score for this q; -1 shows question not done yet
			State[QNum][1] = new Array(); //answers
			for (ANum = 0; ANum<I[QNum][3].length; ANum++){
				State[QNum][1][ANum] = 0; //answer not chosen yet; when chosen, will store its position in the series of choices
			}
			State[QNum][2] = 0; //tries at this q so far
			State[QNum][3] = 0; //incrementing percent-correct values of selected answers
			State[QNum][4] = 0; //penalties incurred for hints
			State[QNum][5] = ''; //Sequence of answers chosen by number
		}
		else{
			State[QNum] = null;
		}
	}
}



function CheckMCAnswer(QNum, ANum, Btn){
//if question doesn't exist, bail
	if (State[QNum].length < 1){return;}
	
//Get the feedback
	Feedback = I[QNum][3][ANum][1];
	
//Now show feedback and bail if question already complete
	if (State[QNum][0] > -1){
//Add an extra message explaining that the question
// is finished if defined by the user
		if (strQuestionFinished.length > 0){Feedback += '<br />' + strQuestionFinished;}
//Show the feedback
		ShowMessage(Feedback);
//New for 6.2.2.1: If you want to mark an answer as correct even when it's the final choice, uncomment this line.
//		if (I[QNum][3][ANum][2] >= 1){Btn.innerHTML = CorrectIndicator;}else{Btn.innerHTML = IncorrectIndicator;}	
		return;
	}
	
//Hide the button while processing
	Btn.style.display = 'none';

//Increment the number of tries
	State[QNum][2]++;
	
//Add the percent-correct value of this answer
	State[QNum][3] += I[QNum][3][ANum][3];
	
//Store the try number in the answer part of the State array, for tracking purposes
	State[QNum][1][ANum] = State[QNum][2];
	if (State[QNum][5].length > 0){State[QNum][5] += ' | ';}
	State[QNum][5] += String.fromCharCode(65+ANum);
	
//Should this answer be accepted as correct?
	if (I[QNum][3][ANum][2] < 1){
//It's wrong

//Mark the answer
		Btn.innerHTML = IncorrectIndicator;
		
//Remove any previous score unless exercise is finished (6.0.3.8+)
		if (Finished == false){
			WriteToInstructions(strInstructions);
		}	
		
//Check whether this leaves just one MC answer unselected, in which case the Q is terminated
		var RemainingAnswer = FinalAnswer(QNum);
		if (RemainingAnswer > -1){
//Behave as if the last answer had been selected, but give no credit for it
//Increment the number of tries
			State[QNum][2]++;		
		
//Calculate the score for this question
			CalculateMCQuestionScore(QNum);
			
//Get the overall score and add it to the feedback
			CalculateOverallScore();
//New for 6.2.2.1
			var QsDone = CheckQuestionsCompleted();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
			else{
				WriteToInstructions(QsDone);
			}
		}
	}
	else{
//It's right
//Mark the answer
		Btn.innerHTML = CorrectIndicator;
				
//Calculate the score for this question
		CalculateMCQuestionScore(QNum);
		
//New for 6.2.2.0
		var QsDone = CheckQuestionsCompleted();

//Get the overall score and add it to the feedback
		if (ContinuousScoring == true){
			CalculateOverallScore();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
		}
		else{
			WriteToInstructions(QsDone);
		}
	}
	
//Show the button again
	Btn.style.display = 'inline';
	
//Finally, show the feedback	
	ShowMessage(Feedback);
	
//Check whether all questions are now done
	CheckFinished();
}

function CalculateMCQuestionScore(QNum){
	var Tries = State[QNum][2] + State[QNum][4]; //include tries and hint penalties
	var PercentCorrect = State[QNum][3];
	var TotAns = GetTotalMCAnswers(QNum);
	var HintPenalties = State[QNum][4];
	
//Make sure it's not already complete

	if (State[QNum][0] < 0){
//Allow for Hybrids
		if (HintPenalties >= 1){
			State[QNum][0] = 0;
		}
		else{
//This line calculates the score for this question
			if (TotAns == 1){
				State[QNum][0] = 1;
			}
			else{
				State[QNum][0] = ((TotAns-((Tries*100)/State[QNum][3]))/(TotAns-1));
			}
		}
//Fix for Safari bug added for version 6.0.3.42 (negative infinity problem)
		if ((State[QNum][0] < 0)||(State[QNum][0] == Number.NEGATIVE_INFINITY)){
			State[QNum][0] = 0;
		}
	}
}

function GetTotalMCAnswers(QNum){
	var Result = 0;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			Result++;
		}
	}
	return Result;
}

function FinalAnswer(QNum){
	var UnchosenAnswers = 0;
	var FinalAnswer = -1;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			if (State[QNum][1][ANum] < 1){ //This answer hasn't been chosen yet
				UnchosenAnswers++;
				FinalAnswer = ANum;
			}
		}
	}
	if (UnchosenAnswers == 1){
		return FinalAnswer;
	}
	else{
		return -1;
	}
}





function CheckMultiSelAnswer(QNum){
//bail if question doesn't exist or exercise finished
	if ((State[QNum].length < 1)||(Finished == true)){return;}

//Increment the tries for this question
	State[QNum][2]++;
	
	var ShouldBeChecked;
	var Matches = 0;
	if (State[QNum][5].length > 0){State[QNum][5] += ' | ';}
	
//Check if there are any mismatches
	Feedback = '';
	var CheckBox = null;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		CheckBox = document.getElementById('Q_' + QNum + '_' + ANum + '_Chk');
		if (CheckBox.checked == true){
			State[QNum][5] += 'Y';
		}
		else{
			State[QNum][5] += 'N';
		}
		ShouldBeChecked = (I[QNum][3][ANum][2] == 1);
		if (ShouldBeChecked == CheckBox.checked){
			Matches++;
		}
		else{
			Feedback = I[QNum][3][ANum][1];
		}
	}
//Add the hit readout
	Feedback = Matches + ' / ' + I[QNum][3].length + '<br />' + Feedback;
	if (Matches == I[QNum][3].length){
//It's right
		CalculateMultiSelQuestionScore(QNum);
		
//New for 6.2.2.0
		var QsDone = CheckQuestionsCompleted();
		
		if (ContinuousScoring == true){
			CalculateOverallScore();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
			else{
				WriteToInstructions(QsDone);
			}
		}
	}
	else{
//It's wrong -- Remove any previous score unless exercise is finished (6.0.3.8+)
		if (Finished == false){
			WriteToInstructions(strInstructions);
		}	
	}
		
//Show the feedback
	ShowMessage(Feedback);
	
//Check whether all questions are now done
	CheckFinished();
}

function CalculateMultiSelQuestionScore(QNum){
	var Tries = State[QNum][2];
	var TotAns = State[QNum][1].length;
	
//Make sure it's not already complete
	if (State[QNum][0] < 0){
		State[QNum][0] = (TotAns - (Tries-1)) / TotAns;
		if (State[QNum][0] < 0){
			State[QNum][0] = 0;
		}
	}
}



function CalculateOverallScore(){
	var TotalWeighting = 0;
	var TotalScore = 0;
	
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] > -1){
				TotalWeighting += I[QNum][0];
				TotalScore += (I[QNum][0] * State[QNum][0]);
			}
		}
	}
	if (TotalWeighting > 0){
		Score = Math.floor((TotalScore/TotalWeighting)*100);
	}
	else{
//if TotalWeighting is 0, no questions so far have any value, so 
//no penalty should be shown.
		Score = 100; 
	}
}

//New for 6.2.2.0
function CheckQuestionsCompleted(){
	if (ShowCompletedSoFar == false){return '';}
	var QsCompleted = 0;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] >= 0){
				QsCompleted++;
			}
		}
	}
//Fixes for 6.2.2.2
	if (QsCompleted >= QArray.length){
		return ExerciseCompleted;
	}
	else{
		return CompletedSoFar + ' ' + QsCompleted + '/' + QArray.length + '.';
	}
}

function CheckFinished(){
	var FB = '';
	var AllDone = true;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] < 0){
				AllDone = false;
			}
		}
	}
	if (AllDone == true){
	
//Report final score and submit if necessary
		CalculateOverallScore();
		FB = YourScoreIs + ' ' + Score + '%.';
		if (ShowCorrectFirstTime == true){
			var CFT = 0;
			for (QNum=0; QNum<State.length; QNum++){
				if (State[QNum] != null){
					if (State[QNum][0] >= 1){
						CFT++;
					}
				}
			}
			FB += '<br />' + CorrectFirstTime + ' ' + CFT + '/' + QsToShow;
		}
		
//New for 6.2.2.0
		FB += '<br />' + ExerciseCompleted;
		
		WriteToInstructions(FB);
		
		Finished == true;




		TimeOver = true;
		Locked = true;
		


		Finished = true;
		Detail = '<?xml version="1.0"?><hpnetresult><fields>';
		for (QNum=0; QNum<State.length; QNum++){
			if (State[QNum] != null){
				if (State[QNum][5].length > 0){
					Detail += '<field><fieldname>Question #' + (QNum+1) + '</fieldname><fieldtype>question-tracking</fieldtype><fieldlabel>Q ' + (QNum+1) + '</fieldlabel><fieldlabelid>QuestionTrackingField</fieldlabelid><fielddata>' + State[QNum][5] + '</fielddata></field>';
				}
			}
		}
		Detail += '</fields></hpnetresult>';
	}

}










//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">




<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">AZ-104</h2>

	<h3 class="ExerciseSubtitle">Quiz</h3>



</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions"></div>
</div>


<div id="ContainerDiv">



<div class="ExerciseContainer">

<div id="QNav" class="QuestionNavigation">

<p style="text-align: right;">
<button id="ShowMethodButton" class="FuncButton" onclick="ShowHideQuestions(); return false;">Show all questions</button>
</p>

<div id="OneByOneReadout">
<button id="PrevQButton" class="FuncButton" onclick="ChangeQ(-1); return false;">&lt;=</button>

<span id="QNumReadout" class="QNum">&#160;</span>

<button id="NextQButton" class="FuncButton" onclick="ChangeQ(1); return false;">=&gt;</button>
<br />
</div>

</div>
 
<ol class="QuizQuestions" id="Questions">
<li class="QuizQuestion" id="Q_0" style="display: none;"><div class="QuestionText">You are creating an Azure Kubernetes Services (AKS) cluster as shown in the following exhibit.<br /><br /><img src="imagen1.jpg" alt="imagen1.jpg" title="imagen1" width="560" height="709"/><br /><br />Use the drop-down menus to select the answer choice that completes each statement <br />61 / 1468<br />based on the information presented in the graphic.<br />NOTE: Each correct selection is worth one point.<br /><br /><img src="img2.jpg" alt="img2.jpg" title="img2" width="803" height="365"/><br /><br /></div><ol class="MSelAnswers"><li id="Q_0_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_0_Chk" class="MSelCheckbox" />Box1-Enable virtual nodes</div></form></li><li id="Q_0_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_1_Chk" class="MSelCheckbox" />Box1-Invrease the number of node pools</div></form></li><li id="Q_0_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_2_Chk" class="MSelCheckbox" />Box1-Modify the kubernetes version setting</div></form></li><li id="Q_0_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_3_Chk" class="MSelCheckbox" />Box1-modify the network configuration setting</div></form></li><li id="Q_0_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_4_Chk" class="MSelCheckbox" />Box2-AKS-managed Azure Active Directory</div></form></li><li id="Q_0_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_5_Chk" class="MSelCheckbox" />Box2-Authentication method</div></form></li><li id="Q_0_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_6_Chk" class="MSelCheckbox" />Box2-Autorized IP ranges</div></form></li><li id="Q_0_7"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_7_Chk" class="MSelCheckbox" />Box2-Kubernetes version</div></form></li><li id="Q_0_8"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_0_8_Chk" class="MSelCheckbox" />Box2-Network configuration</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(0)">Check</button></li>
<li class="QuizQuestion" id="Q_1" style="display: none;"><div class="QuestionText">You have an Azure subscription that contains an Azure Kubernetes Service (AKS) cluster <br />named Cluster1. Cluster1 hosts a node pool named Pool1 that has four nodes.<br />You need to perform a coordinated upgrade of Cluster1. The solution must meet the<br />following requirements:<br />&#x2022; Deploy two new nodes to perform the upgrade.<br />&#x2022; Minimize costs.<br />How should you complete the command? To answer, select the appropriate options in the <br />answer area.<br />NOTE: Each correct selection is worth one point.<br /><br /><img src="img3.jpg" alt="img3.jpg" title="img3" width="804" height="224"/></div><ol class="MSelAnswers"><li id="Q_1_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_0_Chk" class="MSelCheckbox" />Box1-add</div></form></li><li id="Q_1_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_1_Chk" class="MSelCheckbox" />Box1-get-updates</div></form></li><li id="Q_1_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_2_Chk" class="MSelCheckbox" />Box1-scale</div></form></li><li id="Q_1_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_3_Chk" class="MSelCheckbox" />Box1-updates</div></form></li><li id="Q_1_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_4_Chk" class="MSelCheckbox" />Box2-max-count 2</div></form></li><li id="Q_1_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_5_Chk" class="MSelCheckbox" />Box2-max-pods 2</div></form></li><li id="Q_1_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_6_Chk" class="MSelCheckbox" />Box2-max-surge 2</div></form></li><li id="Q_1_7"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_1_7_Chk" class="MSelCheckbox" />Box2-count 2</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(1)">Check</button></li>
<li class="QuizQuestion" id="Q_2" style="display: none;"><div class="QuestionText">You have an Azure subscription.<br />You create the following file named Deploy.json.<br /><br /><img src="img4.jpg" alt="img4.jpg" title="img4" width="819" height="658"/><br /><br /><img src="img5.jpg" alt="img5.jpg" title="img5" width="829" height="306"/><br /><br /></div><ol class="MSelAnswers"><li id="Q_2_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_0_Chk" class="MSelCheckbox" />the commands will create four new resources- YES</div></form></li><li id="Q_2_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_1_Chk" class="MSelCheckbox" />the commands will create four new resources- NOT</div></form></li><li id="Q_2_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_2_Chk" class="MSelCheckbox" />the commands will create storage accounts in the west US azure region- YES</div></form></li><li id="Q_2_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_3_Chk" class="MSelCheckbox" />the commands will create storage accounts in the west US azure region- NOT</div></form></li><li id="Q_2_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_4_Chk" class="MSelCheckbox" />The first storage account that is created will have a prefix of 0.-YES</div></form></li><li id="Q_2_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_2_5_Chk" class="MSelCheckbox" />The first storage account that is created will have a prefix of 0.-NOT</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(2)">Check</button></li>
<li class="QuizQuestion" id="Q_3" style="display: none;"><div class="QuestionText">You plan to deploy several Azure virtual machines that will run Windows Server 2019 in a <br />virtual machine scale set by using an Azure Resource Manager template.<br />You need to ensure that NGINX is available on all the virtual machines after they are <br />deployed.<br /><br />What should you use?<br /><br />&#x2022; A. Azure Custom Script Extension<br />&#x2022; B. Deployment Center in Azure App Service<br />&#x2022; C. the Publish-AzVMDscConfiguration cmdlet<br />&#x2022; D. the New-AzConfigurationAssignment cmdlet</div><ol class="MCAnswers"><li id="Q_3_0"><button class="FuncButton" id="Q_3_0_Btn" onclick="CheckMCAnswer(3,0,this)">?</button>&#160;&#160;A</li><li id="Q_3_1"><button class="FuncButton" id="Q_3_1_Btn" onclick="CheckMCAnswer(3,1,this)">?</button>&#160;&#160;B</li><li id="Q_3_2"><button class="FuncButton" id="Q_3_2_Btn" onclick="CheckMCAnswer(3,2,this)">?</button>&#160;&#160;C</li><li id="Q_3_3"><button class="FuncButton" id="Q_3_3_Btn" onclick="CheckMCAnswer(3,3,this)">?</button>&#160;&#160;D</li></ol></li>
<li class="QuizQuestion" id="Q_4" style="display: none;"><div class="QuestionText">You have an Azure subscription that contains a resource group named RG1.<br />You plan to use an Azure Resource Manager (ARM) template named template1 to deploy <br />resources. The solution must meet the following requirements:<br />&#x2022; Deploy new resources to RG1.<br />&#x2022; Remove all the existing resources from RG1 before deploying the new resources.<br />How should you complete the command? To answer, select the appropriate options in the <br />answer area.<br />NOTE: Each correct selection is worth one point.<br /><br /><img src="img6.jpg" alt="img6.jpg" title="img6" width="824" height="333"/></div><ol class="MSelAnswers"><li id="Q_4_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_0_Chk" class="MSelCheckbox" />Box1-Name</div></form></li><li id="Q_4_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_1_Chk" class="MSelCheckbox" />Box1-QueryString</div></form></li><li id="Q_4_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_2_Chk" class="MSelCheckbox" />Box1-ResourceGroupName</div></form></li><li id="Q_4_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_3_Chk" class="MSelCheckbox" />Box1-Tag</div></form></li><li id="Q_4_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_4_Chk" class="MSelCheckbox" />Box2-All</div></form></li><li id="Q_4_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_5_Chk" class="MSelCheckbox" />Box2-Complete</div></form></li><li id="Q_4_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_4_6_Chk" class="MSelCheckbox" />Box2-Incremental</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(4)">Check</button></li>
<li class="QuizQuestion" id="Q_5" style="display: none;"><div class="QuestionText">You have an Azure App Service web app named app1.<br />You configure autoscaling as shown in following exhibit.<br /><br /><br /><img src="img7.jpg" alt="img7.jpg" title="img7" width="796" height="415"/><br /><br />You configure the autoscale rule criteria as shown in the following exhibit.<br /><br /><img src="img8.jpg" alt="img8.jpg" title="img8" width="591" height="817"/><br /><br />Use the drop-down menus to select the answer choice that answers each question based <br />on the information presented in the graphic.<br />NOTE: Each correct selection is worth one point.<br /><br /><img src="img9.jpg" alt="img9.jpg" title="img9" width="802" height="314"/><br /><br /></div><ol class="MSelAnswers"><li id="Q_5_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_0_Chk" class="MSelCheckbox" />Box1-1 instance</div></form></li><li id="Q_5_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_1_Chk" class="MSelCheckbox" />Box1-2 instances</div></form></li><li id="Q_5_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_2_Chk" class="MSelCheckbox" />Box1-3 instances</div></form></li><li id="Q_5_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_3_Chk" class="MSelCheckbox" />Box1-4 instances</div></form></li><li id="Q_5_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_4_Chk" class="MSelCheckbox" />Box1-5 instances</div></form></li><li id="Q_5_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_5_Chk" class="MSelCheckbox" />Box2-1 minute</div></form></li><li id="Q_5_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_6_Chk" class="MSelCheckbox" />Box2-5 minutes</div></form></li><li id="Q_5_7"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_7_Chk" class="MSelCheckbox" />Box2-10 minutes</div></form></li><li id="Q_5_8"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_5_8_Chk" class="MSelCheckbox" />Box2-15 minutes</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(5)">Check</button></li>
<li class="QuizQuestion" id="Q_6" style="display: none;"><div class="QuestionText">You have an Azure subscription.<br />You plan to deploy the Azure container instances shown in the following table.<br /><br /><img src="img10.jpg" alt="img10.jpg" title="img10" width="612" height="165"/><br /><br />Which instances can you deploy to a container group?<br />&#x2022; A. Instance1 only<br />&#x2022; B. Instance2 only<br />&#x2022; C. Instance1 and Instance2 only<br />&#x2022; D. Instance3 and Instance4 only</div><ol class="MCAnswers"><li id="Q_6_0"><button class="FuncButton" id="Q_6_0_Btn" onclick="CheckMCAnswer(6,0,this)">?</button>&#160;&#160;A</li><li id="Q_6_1"><button class="FuncButton" id="Q_6_1_Btn" onclick="CheckMCAnswer(6,1,this)">?</button>&#160;&#160;B</li><li id="Q_6_2"><button class="FuncButton" id="Q_6_2_Btn" onclick="CheckMCAnswer(6,2,this)">?</button>&#160;&#160;C</li><li id="Q_6_3"><button class="FuncButton" id="Q_6_3_Btn" onclick="CheckMCAnswer(6,3,this)">?</button>&#160;&#160;D</li></ol></li>
<li class="QuizQuestion" id="Q_7" style="display: none;"><div class="QuestionText">You plan to deploy several Azure virtual machines that will run Windows Server 2019 in a <br />virtual machine scale set by using an Azure Resource Manager template.<br />You need to ensure that NGINX is available on all the virtual machines after they are <br />deployed.<br />What should you use?<br /><br />&#x2022; A. Azure Custom Script Extension<br />&#x2022; B. Deployment Center in Azure App Service<br />&#x2022; C. the New-AzConfigurationAssignment cmdlet<br />&#x2022; D. Azure AD Application Proxy</div><ol class="MCAnswers"><li id="Q_7_0"><button class="FuncButton" id="Q_7_0_Btn" onclick="CheckMCAnswer(7,0,this)">?</button>&#160;&#160;A</li><li id="Q_7_1"><button class="FuncButton" id="Q_7_1_Btn" onclick="CheckMCAnswer(7,1,this)">?</button>&#160;&#160;B</li><li id="Q_7_2"><button class="FuncButton" id="Q_7_2_Btn" onclick="CheckMCAnswer(7,2,this)">?</button>&#160;&#160;C</li><li id="Q_7_3"><button class="FuncButton" id="Q_7_3_Btn" onclick="CheckMCAnswer(7,3,this)">?</button>&#160;&#160;D</li></ol></li>
<li class="QuizQuestion" id="Q_8" style="display: none;"><div class="QuestionText">You have an Azure subscription that has the public IP addresses shown in the following <br />table.<br /><br /><br /><img src="img11.jpg" alt="img11.jpg" title="img11" width="821" height="482"/><br /><br /></div><ol class="MCAnswers"><li id="Q_8_0"><button class="FuncButton" id="Q_8_0_Btn" onclick="CheckMCAnswer(8,0,this)">?</button>&#160;&#160;A</li><li id="Q_8_1"><button class="FuncButton" id="Q_8_1_Btn" onclick="CheckMCAnswer(8,1,this)">?</button>&#160;&#160;B</li><li id="Q_8_2"><button class="FuncButton" id="Q_8_2_Btn" onclick="CheckMCAnswer(8,2,this)">?</button>&#160;&#160;C</li><li id="Q_8_3"><button class="FuncButton" id="Q_8_3_Btn" onclick="CheckMCAnswer(8,3,this)">?</button>&#160;&#160;D</li></ol></li>
<li class="QuizQuestion" id="Q_9" style="display: none;"><div class="QuestionText">You have an Azure subscription.<br />You need to deploy a virtual machine by using an Azure Resource Manager (ARM) <br />template.<br />How should you complete the template? To answer, select the appropriate options in the <br />answer area.<br />NOTE: Each correct selection is worth one point.<br /><br /><img src="img12.jpg" alt="img12.jpg" title="img12" width="841" height="578"/></div><ol class="MSelAnswers"><li id="Q_9_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_0_Chk" class="MSelCheckbox" />Box1-reference</div></form></li><li id="Q_9_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_1_Chk" class="MSelCheckbox" />box1-resourceld</div></form></li><li id="Q_9_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_2_Chk" class="MSelCheckbox" />box1-Union</div></form></li><li id="Q_9_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_3_Chk" class="MSelCheckbox" />Box2-Array</div></form></li><li id="Q_9_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_4_Chk" class="MSelCheckbox" />Box2-image</div></form></li><li id="Q_9_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_5_Chk" class="MSelCheckbox" />Box2-imagereference</div></form></li><li id="Q_9_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_9_6_Chk" class="MSelCheckbox" />Box2-vhd</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(9)">Check</button></li>
<li class="QuizQuestion" id="Q_10" style="display: none;"><div class="QuestionText">You need to configure a new Azure App Service app named WebApp1. The solution must <br />meet the following requirements:<br />&#x2022; WebApp1 must be able to verify a custom domain name of app.contoso.com.<br />&#x2022; WebApp1 must be able to automatically scale up to eight instances.<br />&#x2022; Costs and administrative effort must be minimized.<br />Which pricing plan should you choose, and which type of record should you use to verify <br />the domain? To answer, select the appropriate options in the answer area.<br />NOTE: Each correct answer is worth one point.<br /><br /><img src="img13.jpg" alt="img13.jpg" title="img13" width="824" height="593"/><br /><br /><br /></div><ol class="MSelAnswers"><li id="Q_10_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_0_Chk" class="MSelCheckbox" />Box1-Basic</div></form></li><li id="Q_10_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_1_Chk" class="MSelCheckbox" />Box1-Free</div></form></li><li id="Q_10_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_2_Chk" class="MSelCheckbox" />Box1-Shared</div></form></li><li id="Q_10_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_3_Chk" class="MSelCheckbox" />Box1-Standar</div></form></li><li id="Q_10_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_4_Chk" class="MSelCheckbox" />Box2-A</div></form></li><li id="Q_10_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_5_Chk" class="MSelCheckbox" />Box2-AAAA</div></form></li><li id="Q_10_6"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_6_Chk" class="MSelCheckbox" />Box2-PTR</div></form></li><li id="Q_10_7"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_10_7_Chk" class="MSelCheckbox" />Box2-TXT</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(10)">Check</button></li>
<li class="QuizQuestion" id="Q_11" style="display: none;"><div class="QuestionText">You have an Azure subscription that contains the virtual machines shown in the following <br />table.<br /><br /><img src="img14.jpg" alt="img14.jpg" title="img14" width="863" height="715"/><br /><br />In ComputeGallery1, you create a virtual machine image definition named Image1 as <br />shown in the image definition exhibit. (Click the Image Definition tab.<br /><br /><img src="img15.jpg" alt="img15.jpg" title="img15" width="560" height="743"/><br /><br />For each of the following statements, select Yes if the statement is true. Otherwise, select <br />No,<br />NOTE: Each correct selection is worth one point.<br /><br /><br /><img src="img16.jpg" alt="img16.jpg" title="img16" width="921" height="315"/></div><ol class="MSelAnswers"><li id="Q_11_0"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_0_Chk" class="MSelCheckbox" />Opcion1-YES</div></form></li><li id="Q_11_1"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_1_Chk" class="MSelCheckbox" />Opcion1-NOT</div></form></li><li id="Q_11_2"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_2_Chk" class="MSelCheckbox" />Opcion2-YES</div></form></li><li id="Q_11_3"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_3_Chk" class="MSelCheckbox" />Opcion2-NOT</div></form></li><li id="Q_11_4"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_4_Chk" class="MSelCheckbox" />Opcion3-YES</div></form></li><li id="Q_11_5"><form method="post" onsubmit="return false;"><div><input type="checkbox" id="Q_11_5_Chk" class="MSelCheckbox" />Opcion3-NOT</div></form></li></ol><button class="FuncButton" onclick="CheckMultiSelAnswer(11)">Check</button></li></ol>



</div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">




<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
